{
  "meta": {
    "language": "java",
    "language_version": "17",
    "language_name": "Java",
    "structure": "classes"
  },
  "concepts": {
    "normal_class": {
      "code": "access-modifier class ClassName {\n  //Class body containing variables and methods \n}",
      "name": "Normal class"
    },
    "abstract_class": {
      "code": "access-modifier abstract class ClassName {\n //declare fields  \n  //declare non-abstract methods  \n  abstract access-modifier method_name();  \n}",
      "name": "Abstract class"
    },
    "interface": {
      "code": "interface interface_name {\n declare constant fields \n  //declare methods that abstract by default i.e. access-modifier method_name(); \n}",
      "name": "Interface"
    },
    "read_only_class": {
      "code": "access-modifier class ClassName {\n  //Private Data Member Declaration \n  private data-type variable_name = variable_value; \n  //Defining Getter method to return the value of private properties. \n  public data-type getter_method() {\n  return variable_name; \n} \n}",
      "comment": "We can make a class read-only by making all of the data members private.  \n  Please note:  \n  1.If we make a class read-only, then we can\u2019t modify the properties or data members value of the class. \n  2.If we make a class read-only, then we can only read the properties or data members value of the class.  \n  3.The read-only class will contain only getter methods which return the value of the private properties to the main() function. \n  4.The read-only class can contain setter methods if we want to modify the value of the private properties after reading because there is our choice to keep setter method in the class but as per based on the concepts we should not contain.",
      "name": "Read-only class"
    },
    "static_class": {
      "code": "access-modifier class OuterClassName {\n  access-modifier static data-type variable_name = variable_value;  \n  //Static and nested class \n  static class InnerStaticClassName {\n  //non-static method of the nested class \n  access-modifier data-type method_name() {\n  //statements to access static members of the outer class \n}  \n}  \n}",
      "comment": "We can declare a class static by using the static keyword. A class can be declared static only if it is a nested class. It does not require any reference of the outer class.",
      "name": "Static class"
    },
    "inner_class": {
      "code": "access-modifier class OuterClassName {\n    //class body containing variables, methods and nested class   \n  class InnerStaticClassName {\n    //class body containing variables and methods \n} \n}",
      "comment": "Java inner class or nested class is a class that is declared inside the class or interface.",
      "name": "Inner class"
    },
    "packages": {
      "code": "package PackageName;",
      "comment": "To create a package, use the package keyword. To create an object of a class (bundled in a package), in your code, you have to use import keyword followed by its fully qualified name or end the sentence with an asterisk sign (.*) after package to import all classes in the package.",
      "name": "Packages"
    },
    "class_with_generic_type": {
      "code": "access-modifier class ClassName<T> {\n //T stands for 'Type' \n  private T t;  \n  public void set(T t) { this.t = t; }  \n  public T get() { return t; }  \n}",
      "comment": "A generic class is defined with the following format: class name<T1, T2, ..., Tn> { /* ... */ }. The type parameter section, delimited by angle brackets (<>), follows the class name. It specifies the type parameters (also called type variables) T1, T2, ..., and Tn.",
      "name": "Class with a generic type"
    },
    "private_variables": {
      "code": "private type varName = value;",
      "name": "Defining private variables"
    },
    "protected_variables": {
      "code": "protected data_type variable_name = value;",
      "name": "Defining protected variables"
    },
    "public_variables": {
      "code": "public data_type variable_name = value;",
      "name": "Defining public variables"
    },
    "static_variables": {
      "code": "static data_type variable_name = value;",
      "name": "Defining static variables"
    },
    "private_functions": {
      "code": "private data_type method_name(){\n //method body \n}",
      "name": "Defining private functions"
    },
    "protected_functions": {
      "code": "protected data_type method_name(){\n //method body \n}",
      "name": "Defining protected functions"
    },
    "public_functions": {
      "code": "public data_type method_name(){\n //method body \n}",
      "name": "Defining public functions"
    },
    "static_functions": {
      "code": "access-modifier static data_type method_name(){\n //method body \n}",
      "name": "Defining static functions"
    },
    "extends_class": {
      "code": "class ChildClassName extends ParentClassName {\n  //Class body containing variables and methods \n}",
      "name": "Class that inherits/extends another class"
    },
    "extending_interface": {
      "code": "class ClassName implements InterfaceName {\n  //Class body containing variables and methods \n}",
      "name": "Class/Interface that inherits/extends another class/interface"
    },
    "calling_superclass_functions": {
      "code": "super.methodName();",
      "name": "Calling a superclass function"
    },
    "overriding_superclass_functions": {
      "code": "class ClassName1 {\n public data_type method_name() {\n  //method body \n} \n} \n  public class ClassName2 extends ClassName1 {\n  @Override \n  public data_type method_name() {\n  //overriding method body  \n} \n}",
      "name": "Overriding a superclass function"
    },
    "instantiating_object": {
      "code": "ClassName objName = new ClassName();  ",
      "name": "Instantiating a new object"
    },
    "instantiating_polymorphic_object": {
      "code": "ParentClassOrInterfaceName objName = new ChildClassName();",
      "comment": "A reference variable can refer to any object of its declared type or any subtype of its declared type. A reference variable can be declared as a class or interface type.",
      "name": "Instantiating a polymorphic object"
    },
    "implement_constructor": {
      "code": "access-modifier class ClassName {\n  ClassName(){\n //constructor body  \n}  \n}",
      "name": "Implementing a class constructor"
    },
    "implement_deconstructor": {
      "not-implemented": "true",
      "comment": "There is no concept of destructor in Java. In place of the destructor, Java provides the garbage collector that works the same as the destructor. The garbage collector is a program (thread) that runs on the JVM. It automatically deletes the unused objects (objects that are no longer used) and free-up the memory.",
      "name": "Implementing a class deconstructor"
    }
  }
}
