{
  "meta": {
    "language": "language_id",
    "language_version": "version.number",
    "language_name": "Human-Friendly Language Name"
  },
  "categories": {
    "Creating/Destroying Strings": [
      "is_primitive_or_not",
      "import",
      "default_string_byte_encoding",
      "create_new_string",
      "create_multiline_string",
      "assign_new_string",
      "destroy_string"
    ],
    "String Basics": [
      "length_of_string",
      "max_length_of_string",
      "clear_string",
      "is_empty",
      "concatenate_two_strings",
      "concatenate_many_strings",
      "is_all_alphabetical",
      "is_all_numerical",
      "is_all_alphanumeric",
      "is_decimal",
      "is_all_whitespaces",
      "is_all_uppercase",
      "is_all_lowercase",
      "is_in_titlecase"
    ],
    "Find and Search": [
      "does_substring_exist",
      "find_start_index_of_substring",
      "find_start_index_of_additional_substring",
      "find_start_index_of_substring_from_end",
      "count_occurrences_of_substring",
      "get_leftmost_characters",
      "get_rightmost_characters",
      "get_substring_from_start_and_end_index",
      "get_substring_from_start_index_and_length"
    ],
    "Manipulating Strings": [
      "convert_to_uppercase",
      "convert_to_lowercase",
      "convert_to_title_case",
      "capitalize_string",
      "remove_whitespace",
      "replace_substring",
      "replace_all_substring",
      "split_at_index",
      "split_at_newlines",
      "split_at_substring",
      "merge_lists_into_string",
      "encode_html_entities",
      "decode_html_entities",
      "encode_url_percent",
      "decode_url_percent",
      "encode_to_base64",
      "decode_from_base64"
    ],
    "String Formatting": [
      "format_string_function",
      "parameter_format_in_order",
      "parameter_format_numerical",
      "parameter_format_by_name",
      "format_as_integer",
      "format_as_decimal",
      "format_as_fixed_decimal",
      "format_as_currency",
      "format_as_percentage",
      "format_number_with_separators",
      "format_number_with_positive_negative_sign",
      "format_number_in_scientific_notation_little_e",
      "format_number_in_scientific_notation_big_e",
      "format_number_in_binary",
      "format_number_in_octal",
      "format_number_in_hexadecimal"
    ]
  },
  "strings": {
    "is_primitive_or_not": {
      "name": "Is this a built-in type in this language?",
      "code": "Yes"
    },
    "import": {
      "name": "Import the string class",
      "code": "import java.lang.String;",
      "comment": "Import is not necessary as 'String' is present in package java.lang which is imported by default in all Java programs."
    },
    "default_string_byte_encoding": {
      "name": "Default byte encoding (ex: ASCII, UTF-8, UTF-16, etc.)",
      "code": "UTF-16"
    },
    "create_new_string": {
      "name": "Create new string",
      "code": "String variableName = \"......\";"
    },
    "create_multiline_string": {
      "name": "Create new multi-line string",
      "code": "String variableName = \"Line 1\n  Line2\n  Line3\";",
      "comment": "Multiline literal implementation does not exist in Java."
    },
    "assign_new_string": {
      "name": "String stringOne = \"A new string.\";\nString stringTwo = stringOne;",
      "code": ""
    },
    "destroy_string": {
      "name": "Destroy string",
      "not-implemented": "true",
      "code": ""
    },
    "length_of_string": {
      "name": "Length of string",
      "code": "variableName.length();\n\"Word\".length();"
    },
    "max_length_of_string": {
      "name": "Maximum length of string",
      "code": "2,147,483,647 characters"
    },
    "clear_string": {
      "name": "Clear/empty string",
      "code": "stringVariableYouWantEmptied = \"\";"
    },
    "is_empty": {
      "name": "Is string empty?",
      "code": "boolean results = (stringVariable == null || stringVariable.length() == 0);",
      "comment": "The results boolean will return true if the string is null or is an empty string."
    },
    "concatenate_two_strings": {
      "name": "Concatenate/join two strings",
      "code": "String str1 = \"Hello \";\n\"String str2 = \"World\";\nString str3 = str1 + str2;"
    },
    "concatenate_many_strings": {
      "name": "Concatenate/join many strings",
      "code": "String str1 = \"Hello \";\n\"String str2 = \"World\";\n\"String str3 = \"I\";\n\"String str4 = \"am\";\n\"String str5 = \"a computer!\";\nString results = str1 + str2 + str3 + str4 + str5;"
    },
    "is_all_alphabetical": {
      "name": "Is string all alphabetical characters?",
      "code": "String str = \"abcdABCD\";\nboolean result = str.matches(\"[a-zA-Z]+\");",
      "comment": "Returns a boolean value of true if the String contains only alphabets, else it returns false." 
    },
    "is_all_numerical": {
      "name": "Is string all numerical characters?",
      "code": "String str = \"10\";\ntry {\n intValue = Integer.parseInt(str);\n  return true;\n} catch (NumberFormatException e) {\n System.out.println(\"Input String cannot be parsed to Integer.\");\n}",
      "comment": "This can work with Double.parseDouble(str), Float.parseFloat(str), and Long.parseLong(str) as well"
    },
    "is_all_alphanumeric": {
      "name": "Is string all alphanumeric characters?",
      "code": "String str = \"abcd1234\";\nboolean result = str.matches(\"^[a-zA-Z0-9]*$\");",
      "comment": "Returns a boolean value of true if the String contains numbers and letters, else it returns false." 

    },
    "is_decimal": {
      "name": "Is string a decimal number?",
      "code": "String str = \"10.23\";\ntry {\n doubleValue = Double.parseDouble(str);\n  return true;\n} catch (NumberFormatException e) {\n System.out.println(\"Input String cannot be parsed to Double.\");\n}",
      "comment": "This can work with  Float.parseFloat(str) as well"
    },
    "is_all_whitespaces": {
      "name": "Is string all whitespace characters?",
      "code": "boolean results = str.trim().isEmpty();",
      "comment": "Boolean results is true if string was all white space."
    },
    "is_all_uppercase": {
      "name": "Is string all uppercase characters?",
      "code": "boolean isUppercase = str.equals(str.toUpperCase());",
      "comment": "Boolean isUppercase is true if string is all uppercase."

    },
    "is_all_lowercase": {
      "name": "Is string all lowercase characters?",
      "code": "boolean isLowercase = str.equals(str.toLowerCase());",
      "comment": "Boolean isLowercase becomes true if string is all lowercase."
    },
    "is_in_titlecase": {
      "name": "Is string formatted in title case?",
      "not-implemented": "true",
      "code": ""
    },
    "does_substring_exist": {
      "name": "Does a substring exist in a string?",
      "code": "str.contains(subString);"
    },
    "find_start_index_of_substring": {
      "name": "Find index of where a substring starts",
      "code": "str.indexOf(subString);"
    },
    "find_start_index_of_additional_substring": {
      "name": "Find index of an additional substring (or starting at another index)",
      "code": "str.indexOf(subString, startIndex);"
    },
    "find_start_index_of_substring_from_end": {
      "name": "Find substring index starting at end",
      "code": "str.lastIndexOf(subString, startIndex);"
    },
    "count_occurrences_of_substring": {
      "name": "Find number of occurences of a substring",
      "code": "String str = \"helloslkhellodjladfjhello\";\nString findStr = \"hello\";\nSystem.out.println(StringUtils.countMatches(str, findStr));",
      "comment": "Requires StringUtils.countMatches from Apache Commons Lang"
    },
    "get_leftmost_characters": {
      "name": "Get a specified number of characters from the left",
      "code": "str.substring(startIndex, numberOfCharacters + 1);",
      "comment": "Second parameter in substring() is exclusive."
    },
    "get_rightmost_characters": {
      "name": "Get a specified number of characters from the right",
      "code": "str.substring(str.length() - numberOfCharacters);"
    },
    "get_substring_from_start_and_end_index": {
      "name": "Return a substring from a string based on starting and ending indices",
      "code": "str.substring(startIndex, endIndex);",
      "comment": "Second parameter in substring() is exclusive."

    },
    "get_substring_from_start_index_and_length": {
      "name": "Return a substring from a string based on starting index and size of substring",
      "code": "str.substring(startIndex, endIndex.length());",
      "comment": "Second parameter in substring() is exclusive."

    },
    "convert_to_uppercase": {
      "name": "Convert string to all uppercase",
      "code": "str.toUppercase();"
    },
    "convert_to_lowercase": {
      "name": "Convert string to all lowercase",
      "code": "str.toLowercase();"
    },
    "convert_to_title_case": {
      "name": "Convert string to title case",
      "code": ""
    },
    "capitalize_string": {
      "name": "Capitalize first letter of a string",
      "code": "String str = \"java\";\nString cap = str.substring(0, 1).toUpperCase() + str.substring(1);"
    },
    "remove_whitespace": {
      "name": "Remove all whitespaces from string",
      "code": "st.replaceAll(\"\\\\s\",\"\")"
    },
    "replace_substring": {
      "name": "Replace a substring with another string",
      "code": "String originalString = \"abcdefghi\";\nString replacedString = originalString.replace(\"abcd\", \"dddd\");"
    },
    "replace_all_substring": {
      "name": "Replace all substring matches with another string",
      "code": "String originalString = \"abcdabcdabcd\";\nString replacedString = originalString.replaceAll(\"abcd\", \"dddd\");"
    },
    "split_at_index": {
      "name": "Split string into a list of strings at a given index",
      "code": "List stringList = strings.split(\" \");"
    },
    "split_at_newlines": {
      "name": "Split string into a list of strings at every new line character",
      "code": "List stringList = strings.split(\"\\\n\");"
    },
    "split_at_substring": {
      "name": "Split string by locating all substrings",
      "code": "string.split(substring);"
    },
    "merge_lists_into_string": {
      "name": "Merge a list of strings into one string",
      "code": "string.join(\" \", list);"
    },
    "encode_html_entities": {
      "name": "Encode HTML entities in a string (ex: ™ to &trade;)",
      "code": ""
    },
    "decode_html_entities": {
      "name": "Decode HTML entitles into characters",
      "code": ""
    },
    "encode_url_percent": {
      "name": "Encode URL percent encoding into string (ex: ' ' to %20)",
      "code": ""
    },
    "decode_url_percent": {
      "name": "Decode URL percent encoding",
      "code": ""
    },
    "encode_to_base64": {
      "name": "Encode string into Base64 format",
      "code": ""
    },
    "decode_from_base64": {
      "name": "Decode string from Base64 format",
      "code": ""
    },
    "format_string_function": {
      "name": "Function to format a string",
      "code": "string.format()"
    },
    "parameter_format_in_order": {
      "name": "Parameter used in format function if they're used in order",
      "code": "Locale l, String format, Object... args"
    },
    "parameter_format_numerical": {
      "name": "Parameter used in format function if they're numerically numbered",
      "code": ""
    },
    "parameter_format_by_name": {
      "name": "Paramater used in format function if they're named variables",
      "code": ""
    },
    "format_as_integer": {
      "name": "Format parameter as an integer",
      "code": "%d"
    },
    "format_as_decimal": {
      "name": "Format parameter as a decimal number",
      "code": ""
    },
    "format_as_fixed_decimal": {
      "name": "Format parameter as a fixed-point decimal number",
      "code": ""
    },
    "format_as_currency": {
      "name": "Format parameter as a currency number",
      "code": ""
    },
    "format_as_percentage": {
      "name": "Format parameter as a percentage number",
      "code": ""
    },
    "format_number_with_separators": {
      "name": "Format number with thousand separators",
      "code": ""
    },
    "format_number_with_positive_negative_sign": {
      "name": "Format number with positive/negative signs",
      "code": ""
    },
    "format_number_in_scientific_notation_little_e": {
      "name": "Format number with scientific notation with 'e'",
      "code": "%e"
    },
    "format_number_in_scientific_notation_big_e": {
      "name": "Format number with scientific notation with 'E'",
      "code": ""
    },
    "format_number_in_binary": {
      "name": "Format number into binary",
      "code": ""
    },
    "format_number_in_octal": {
      "name": "Format number into octal",
      "code": "%o"
    },
    "format_number_in_hexadecimal": {
      "name": "Format number into hexadecimal",
      "code": "%x"
    }
  }
}