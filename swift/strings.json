{
  "meta": {
    "language": "language_id",
    "language_version": "version.number",
    "language_name": "Human-Friendly Language Name"
  },
  "categories": {
    "Creating/Destroying Strings": [
      "is_primitive_or_not",
      "import",
      "default_string_byte_encoding",
      "create_new_string",
      "create_multiline_string",
      "assign_new_string",
      "destroy_string"
    ],
    "String Basics": [
      "length_of_string",
      "max_length_of_string",
      "clear_string",
      "is_empty",
      "concatenate_two_strings",
      "concatenate_many_strings",
      "is_all_alphabetical",
      "is_all_numerical",
      "is_all_alphanumeric",
      "is_decimal",
      "is_all_whitespaces",
      "is_all_uppercase",
      "is_all_lowercase",
      "is_in_titlecase"
    ],
    "Find and Search": [
      "does_substring_exist",
      "find_start_index_of_substring",
      "find_start_index_of_additional_substring",
      "find_start_index_of_substring_from_end",
      "count_occurrences_of_substring",
      "get_leftmost_characters",
      "get_rightmost_characters",
      "get_substring_from_start_and_end_index",
      "get_substring_from_start_index_and_length"
    ],
    "Manipulating Strings": [
      "convert_to_uppercase",
      "convert_to_lowercase",
      "convert_to_title_case",
      "capitalize_string",
      "remove_whitespace",
      "replace_substring",
      "replace_all_substring",
      "split_at_index",
      "split_at_newlines",
      "split_at_substring",
      "merge_lists_into_string",
      "encode_html_entities",
      "decode_html_entities",
      "encode_url_percent",
      "decode_url_percent",
      "encode_to_base64",
      "decode_from_base64"
    ],
    "String Formatting": [
      "format_string_function",
      "parameter_format_in_order",
      "parameter_format_numerical",
      "parameter_format_by_name",
      "format_as_integer",
      "format_as_decimal",
      "format_as_fixed_decimal",
      "format_as_currency",
      "format_as_percentage",
      "format_number_with_separators",
      "format_number_with_positive_negative_sign",
      "format_number_in_scientific_notation_little_e",
      "format_number_in_scientific_notation_big_e",
      "format_number_in_binary",
      "format_number_in_octal",
      "format_number_in_hexadecimal"
    ]
  },
  "strings": {
    "is_primitive_or_not": {
      "code": "Yes"
    },
    "import": {
      "code": "Not required"
    },
    "default_string_byte_encoding": {
      "code": "UTF-16"
    },
    "create_new_string": {
      "code": "var someString = \"value\""
    },
    "create_multiline_string": {
      "code": "var string1 = string2 + \"\\n\""
    },
    "assign_new_string": {
      "code": "var string1 = string2"
    },
    "destroy_string": {
      "code": "string2 = nil"
    },
    "length_of_string": {
      "code": "string1.count"
    },
    "max_length_of_string": {
      "code": "2 to the power of 62"
    },
    "clear_string": {
      "code": "string1 = \"\" or string1 = String()"
    },
    "is_empty": {
      "code": "string1.isEmpty"
    },
    "concatenate_two_strings": {
      "code": "var string3 = string1 + string2"
    },
    "concatenate_many_strings": {
      "code": "var joined = array.joined(separator, stringArray)" 
    },
    "is_all_alphabetical": {
      "not-implemented": "true"
    },
    "is_all_numerical": {
      "code": "string1.isNumber"
    },
    "is_all_alphanumeric": {
      "not-implemented": "true"
    },
    "is_decimal": {
      "not-implemented": "true"
    },
    "is_all_whitespaces": {
      "not-implemented": "true"
    },
    "is_all_uppercase": {
      "not-implemented": "true"
    },
    "is_all_lowercase": {
      "not-implemented": "true"
    },
    "is_in_titlecase": {
      "not-implemented": "true"
    },
    "does_substring_exist": {
      "code": "string.contains(\"jkl\")"
    },
    "find_start_index_of_substring": {
      "code": "let matchedIndex = alphabet.firstIndex(of: \"x\")"
    },
    "find_start_index_of_additional_substring": {
      "not-implemented": "true"
    },
    "find_start_index_of_substring_from_end": {
      "code": "let matchedIndex = alphabet.lastIndex(of: \"x\")"
    },
    "count_occurrences_of_substring": {
      "code": "let count = string1.components(separatedBy:string).count - 1"
    },
    "get_leftmost_characters": {
      "code": "let startText = string1.index(string1.startIndex, offsetBy: 0)"
    },
    "get_rightmost_characters": {
      "code": "let endText = string1.index(string1.endIndex, offsetBy: -3)"
    },
    "get_substring_from_start_and_end_index": {
      "code": "let midText = string1[5..8]"
    },
    "get_substring_from_start_index_and_length": {
      "not-implemented": "true"
    },
    "convert_to_uppercase": {
      "code": "let uppercase = string1.uppercased()"
    },
    "convert_to_lowercase": {
      "code": "let lowercase = string1.lowercased()"
    },
    "convert_to_title_case": {
      "not-implemented": "true"
    },
    "capitalize_string": {
      "not-implemented": "true"
    },
    "remove_whitespace": {
      "not-implemented": "true"
    },
    "replace_substring": {
      "not-implemented": "true"
    },
    "replace_all_substring": {
      "code": "let replaced = str.replacingOccurrences(of: \"4.0\", with: \"5.0\")"
    },
    "split_at_index": {
      "not-implemented": "true"
    },
    "split_at_newlines": {
      "code": "let stringList = myString.split(separator: \"\\n\")"
    },
    "split_at_substring": {
      "code": "let components = str.components(separatedBy: \"something\")"
    },
    "merge_lists_into_string": {
      "code": "let joined = stringArray.joined(separator: \"\")"
    },
    "encode_html_entities": {
      "not-implemented": "true"
    },
    "decode_html_entities": {
      "not-implemented": "true"
    },
    "encode_url_percent": {
      "code": "let escapedString = originalString.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)"
    },
    "decode_url_percent": {
      "code": "let originalString = escapedString.removingPercentEncoding()"
    },
    "encode_to_base64": {
      "code": "let encoded = string.data(using: .utf8)?.base64EncodedString()"
    },
    "decode_from_base64": {
      "name": "Decode string from Base64 format",
      "code": "let decoded = String(data: Data(someString), encoding: .utf8)"
    },
    "format_string_function": {
      "code": "let aStr = String(format: \"%@%x\", \"timeNow in hex: \", time(nil))"
    },
    "parameter_format_in_order": {
      "code": "let aStr = String(format: \"%@%x\", \"timeNow in hex: \", time(nil))"
    },
    "parameter_format_numerical": {
      "code": " String(format: format, arguments: substringsArray)"
    },
    "parameter_format_by_name": {
      "code": "let str = String(format:\"%d, %f, %ld\", INT_VALUE, FLOAT_VALUE, DOUBLE_VALUE)"
    },
    "format_as_integer": {
      "code": "let str = String(format:\"%d\", INT_VALUE)"
    },
    "format_as_decimal": {
      "code": "let str = String(format:\"%f\", DECIMAL_VALUE)"
    },
    "format_as_fixed_decimal": {
      "code": "let str = String(format:\"%.2f\", DECIMAL_VALUE)",
			"comment": "Format to 2 decimal places"
    },
    "format_as_currency": {
      "not-implemented": "true",
      "comment": "There is no built-in method, you have to use the NumberFormatter class with various parameters"
    },
    "format_as_percentage": {
      "not-implemented": "true",
      "comment": "There is no built-in method, you have to use the NumberFormatter class with various parameters"
    },
    "format_number_with_separators": {
      "not-implemented": "true",
      "comment": "There is no built-in method, you have to use the NumberFormatter class with various parameters"
    },
    "format_number_with_positive_negative_sign": {
      "code": "let str = String(format:\"+%d\", INT_VALUE)"
    },
    "format_number_in_scientific_notation_little_e": {
      "code": "let str = String(format:\"%e\", DECIMAL_VALUE)"
    },
    "format_number_in_scientific_notation_big_e": {
      "code": "let str = String(format:\"%E\", DECIMAL_VALUE)"
    },
    "format_number_in_binary": {
      "not-implemented": "true"
    },
    "format_number_in_octal": {
      "code": "let str = String(format:\"%o\", DECIMAL_VALUE)"
    },
    "format_number_in_hexadecimal": {
      "code": "let str = String(format:\"%x\", DECIMAL_VALUE)"
    }
  }
}