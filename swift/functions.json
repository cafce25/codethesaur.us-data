{
  "meta": {
    "language": "swift",
    "language_version": "5.5",
    "language_name": "Swift"
  },
  "categories": {
    "Void Functions": [
      "void_function_no_parameters",
      "void_function_with_parameters",
      "void_function_variable_parameters"
    ],
    "Return Value Functions": [
      "return_value_function_no_parameters",
      "return_value_function_with_parameters",
      "return_value_function_variable_parameters"
    ],
    "Lambda/Anonymous Functions": [
      "anonymous_function_no_parameters",
      "anonymous_function_with_parameters",
      "anonymous_function_variable_parameters"
    ],
    "Subroutines": [
      "call_subroutine",
      "return_from_subroutine"
    ]
  },
  "functions": {
    "void_function_no_parameters": {
      "code": "func functionName() {\n    statements\n}"
    },
    "void_function_with_parameters": {
      "code": "func functionName(parameterOne: Type, parameterTwo: Type) {\n    statements\n}"
    },
    "void_function_variable_parameters": {
      "code": "func functionName(parameterName: Type...) {\n    statements\n}",
      "comment": "Values passed in are made available within the function’s body as an array of type [Type]."
    },
    "return_value_function_no_parameters": {
      "code": "func functionName() -> ReturnType {\n    statements\n    return expression\n}"
    },
    "return_value_function_with_parameters": {
      "code": "func functionName(parameterOne: Type, parameterTwo: Type) -> ReturnType {\n    statements\n    return expression\n}"
    },
    "return_value_function_variable_parameters": {
      "code": "func functionName(parameterName: Type...) -> ReturnType {\n    statements\n    return expression\n}",
      "comment": "Values passed in are made available within the function’s body as an array of type [Type]."
    },
    "anonymous_function_no_parameters": {
      "code": "{ expression }"
    },
    "anonymous_function_with_parameters": {
      "code": "{ (parameterOne: Type, parameterTwo: Type) -> ReturnType in\n    return expression\n}\n\n// with partial type inference\n{ (n1: Int, n2) in n1 + n2 }\n\n// full type inference\n[\"A\", \"B\", \"C\"].sorted(by: { s1, s2 in s1 > s2 })",
      "comment": "Depending on what Swift can infer from the context, parameter types and return type may be optional."
    },
    "anonymous_function_variable_parameters": {
      "code": "{ (parameter: Type...) -> ReturnType in\n    return expression\n}",
      "comment": "Depending on what Swift can infer from the context, return type may be optional."

    },
    "call_subroutine": {
      "code": "// No parameters\nfoo()\n\n// With named parameters\nfoo(parameterName: argument)",
      "comment": "Calls function foo.\nIf function definition contains named parameters, must include parameter names in function call."
    },
    "return_from_subroutine": {
      "code": "return",
      "comment": "If entire function body is a single expression, no return keyword needed to return expression."
    }
  }
}
