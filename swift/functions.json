{
  "meta": {
    "language": "swift",
    "language_version": "5.5",
    "language_name": "Swift",
    "structure": "functions"
  },
  "concepts": {
    "void_function_no_parameters": {
      "code": "func functionName() {\n    statements\n}",
      "name": "Function that does not return a value and takes no parameters"
    },
    "void_function_with_parameters": {
      "code": "func functionName(parameterOne: Type, parameterTwo: Type) {\n    statements\n}",
      "name": "Function that does not return a value and that takes 1 or more defined parameters"
    },
    "void_function_variable_parameters": {
      "code": "func functionName(parameterName: Type...) {\n    statements\n}",
      "comment": "Values passed in are made available within the function\u2019s body as an array of type [Type].",
      "name": "Function that does not return a value and function that takes an unknown number of parameters"
    },
    "return_value_function_no_parameters": {
      "code": "func functionName() -> ReturnType {\n    statements\n    return expression\n}",
      "name": "Function that returns a value and takes no parameters"
    },
    "return_value_function_with_parameters": {
      "code": "func functionName(parameterOne: Type, parameterTwo: Type) -> ReturnType {\n    statements\n    return expression\n}",
      "name": "Function that returns a value and takes 1 or more defined parameters"
    },
    "return_value_function_variable_parameters": {
      "code": "func functionName(parameterName: Type...) -> ReturnType {\n    statements\n    return expression\n}",
      "comment": "Values passed in are made available within the function\u2019s body as an array of type [Type].",
      "name": "Function that returns a value and takes an unknown number of parameters"
    },
    "anonymous_function_no_parameters": {
      "code": "{ expression }",
      "name": "Anonymous function that takes no parameters"
    },
    "anonymous_function_with_parameters": {
      "code": "{ (parameterOne: Type, parameterTwo: Type) -> ReturnType in\n    return expression\n}\n\n// with partial type inference\n{ (n1: Int, n2) in n1 + n2 }\n\n// full type inference\n[\"A\", \"B\", \"C\"].sorted(by: { s1, s2 in s1 > s2 })",
      "comment": "Depending on what Swift can infer from the context, parameter types and return type may be optional.",
      "name": "Anonymous function that takes 1 or more defined parameters"
    },
    "anonymous_function_variable_parameters": {
      "code": "{ (parameter: Type...) -> ReturnType in\n    return expression\n}",
      "comment": "Depending on what Swift can infer from the context, return type may be optional.",
      "name": "Anonymous function that takes an unknown number of parameters"
    },
    "call_subroutine": {
      "code": "// No parameters\nfoo()\n\n// With named parameters\nfoo(parameterName: argument)",
      "comment": "Calls function foo.\nIf function definition contains named parameters, must include parameter names in function call.",
      "name": "Call subroutine"
    },
    "return_from_subroutine": {
      "code": "return",
      "comment": "If entire function body is a single expression, no return keyword needed to return expression.",
      "name": "Return from subroutine"
    }
  }
}
