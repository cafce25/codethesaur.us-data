{
  "meta": {
    "language": "objectivec",
    "language_version": "2.0",
    "language_name": "Objective-C"
  },
  "categories": {
    "Arithmetic Operators": [
      "addition",
      "addition_assignment",
      "subtraction",
      "subtraction_assignment",
      "multiplication",
      "multiplication_assignment",
      "division",
      "division_assignment",
      "modulus",
      "modulus_assignment",
      "unary_plus",
      "unary_minus",
      "increment",
      "decrement",
      "exponential",
      "factorial",
      "absolute_value",
      "percentage"
    ],
    "Equality/Comparison Operators": [
      "equal_to",
      "not_equal_to",
      "less_than",
      "less_than_or_equal_to",
      "greater_than",
      "greater_than_or_equal_to",
      "null_coalescing",
      "is",
      "is_not"
    ],
    "Logical/Boolean/Bitwise Operators": [
      "and",
      "and_assignment",
      "or",
      "or_assignment",
      "not",
      "not_assignment",
      "xor",
      "xor_assignment",
      "xnor",
      "xnor_assignment",
      "left_shift",
      "left_shift_assignment",
      "right_shift",
      "right_shift_assignment"
    ],
    "Conditional Operators": [
      "ternary",
      "null_forgiving"
    ]
  },
  "operators": {
    "addition": {
      "code": "+"
    },
    "addition_assignment": {
      "code": "+=",
      "comment": "a += 20 is same as a = a + 20"
    },
    "subtraction": {
      "code": "-"
    },
    "subtraction_assignment": {
      "code": "-=",
      "comment": "a -= 20 is same as a = a - 20"
    },
    "multiplication": {
      "code": "*"
    },
    "multiplication_assignment": {
      "code": "*=",
      "comment": "a *= 20 is same as a = a * 20"
    },
    "division": {
      "code": "/",
      "comment": "Returns integer quotient i.e. 31/2 gives 15"
    },
    "division_assignment": {
      "code": "/=",
      "comment": "a /= 20 is same as a = a / 20"
    },
    "modulus": {
      "code": "%",
      "comment": "Gives remainder of division"
    },
    "modulus_assignment": {
      "code": "%="
    },
    "unary_plus": {
      "code": "int a = 12",
      "comment": "Value of a is positive 12"
    },
    "unary_minus": {
      "code": "int a = -12",
      "comment": "Value of a is negative 12"
    },
    "increment": {
      "code": "int a = 10; a++;",
      "comment": "Value of a is 11"
    },
    "decrement": {
      "code": "int a = 10; a--;",
      "comment": "Value of a is 9"
    },
    "exponential": {
      "code": "^",
      "comment": "Value of 5^3 is 125"
    },
    "factorial": {
      "code": "",
      "not-implemented": "true"
    },
    "absolute_value": {
      "code": "",
      "not-implemented": "true"
    },
    "percentage": {
      "code": "",
      "not-implemented": "true"
    },
    "equal_to": {
      "code": "=="
    },
    "not_equal_to": {
      "code": "!="
    },
    "less_than": {
      "code": "<"
    },
    "less_than_or_equal_to": {
      "code": "<="
    },
    "greater_than": {
      "code": ">"
    },
    "greater_than_or_equal_to": {
      "code": ">="
    },
    "null_coalescing": {
      "code": "",
      "not-implemented": "true"
    },
    "is": {
      "code": "",
      "not-implemented": "true"
    },
    "is_not": {
      "code": "",
      "not-implemented": "true"
    },
    "and": {
      "code": "&&",
      "comment": "If both operands are non-zero/true then statement is true else false."
    },
    "and_assignment": {
      "code": "&&="
    },
    "or": {
      "code": "||",
      "comment": "If any operand is non-zero/true then statement is true else false."
    },
    "or_assignment": {
      "code": "||="
    },
    "not": {
      "code": "!",
      "comment": "If operand is true then returns false and vice-versa"
    },
    "not_assignment": {
      "code": "=!"
    },
    "xor": {
      "code": "int a = 4 ^ 6 \n",
      "comment": "It is a bitwise operator. It copies the bit if it is set in one operand but not both. 4(100) ^ 6(110) = 2(010)"
    },
    "xor_assignment": {
      "name": "Logical XOR assignment operator",
      "code": "^="
    },
    "xnor": {
      "code":"",
      "not-implemented": "true"
    },
    "xnor_assignment": {
      "code": "",
      "not-implemented": "true"
    },
    "left_shift": {
      "code": "int a = 1 << 2",
      "comment": "Shits the specified bits to left, so a equals to (4)100"
    },
    "left_shift_assignment": {
      "code": "<<="
    },
    "right_shift": {
      "name": "Right shift bitwise operator",
      "code": "int a = 4 >> 2",
      "comment": "Shifts specified bits to right side, 2 bits in this case so a equals to 1"
    },
    "right_shift_assignment": {
      "code": ">>="
    },
    "ternary": {
      "name": "Ternary operator",
      "code": "int a = (5 == 6) ? 60 : 80",
      "comment": "If (5 == 6) true, then value of a is 60 else 80."
    },
    "null_forgiving": {
      "name": "Null forgiving operator",
      "code": "",
      "not-implemented": "true"
    }
  }
}