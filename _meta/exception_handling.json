{
  "meta": {
    "structure": "exception_handling"
  },
  "categories": {
    "Imports": {
      "statement_to_import_exception_handling": "Import statement to add exception handling"
    },
    "Defining Errors/Exceptions": {
      "are_exception_types_functions": "Are specific exception types a functions?",
      "are_exception_types_objects": "Are specific exception types an object?",
      "are_exception_types_gotos": "Are specific exception types a Goto statement?",
      "base_exception_type": "Base exception type name",
      "define_new_exception_type": "Statement to define a new exception type"
    },
    "Error Capture Blocks": {
      "try_or_operator": "Try-Or operator",
      "statement_to_start_trying_code": "Statement to start a block of code to try",
      "statement_to_start_catching_exceptions": "Statement to start catching exceptions",
      "statement_to_catch_generic_exception": "Statement to catch a generic exception",
      "statement_to_catch_specific_exception": "Statement to catch a specific exception",
      "statement_to_catch_multiple_exceptions": "Statement to catch multiple types of exceptions",
      "statement_to_break_out_if_caught_exception": "Statement to break out of a block if an exception is caught",
      "statement_to_stop_program_if_caught_exception": "Statement to stop the program if an exception is caught",
      "statement_to_start_code_if_no_exceptions_caught": "Statement to start code if no exceptions are caught",
      "statement_to_start_cleaning_up_after_exception": "Statement to start code ran after an exception",
      "order_to_call_all_statements": "The order to call all statements in a block to catch exceptions",
      "statement_to_end_trying_code": "Statement to end a block of code to try ",
      "property_with_exception_code": "Property within an exception object containing the error code",
      "property_with_exception_message": "Property within an exception object containing the error message",
      "property_with_stack_trace": "Property within an exception object containing the stack trace",
      "property_containing_other_info": "Property within an exception object containing additional information"
    },
    "Manually Throwing exceptions": {
      "throw_generic_exception": "Throw a generic exception",
      "throw_exception_as_text": "Throw an exception as a text error message",
      "throw_specific_exception_type": "Throw an exception as a specific exception object"
    },
    "Data Type Errors/Exceptions": {
      "base_data_type_exception_type": "Base class type for all data type exceptions",
      "invalid_data_type_exception_type": "Class name for an invalid type exception",
      "variable_not_found_exception_type": "Class name for a variable not found exception",
      "object_not_found_exception_type": "Class name for an object not found exception",
      "index_out_of_bounds_exception_type": "Class name for an index out of bounds exception",
      "key_name_not_found_exception_type": "Class name for a key name not found exception",
      "invalid_encoding_exception_type": "Class name for an invalid encoding exception"
    },
    "Mathematical Errors/Exceptions": {
      "base_mathematical_exception_type": "Base class name for a mathematical exception",
      "overflow_exception_type": "Class name for an overflow exception",
      "floating_point_exception_type": "Class name for a floating point exception",
      "divide_by_zero_exception_type": "Class name for a divide by zero exception",
      "cannot_cast_types_exception_type": "Class name for a cast type exception"
    },
    "Memory Errors/Exceptions": {
      "base_memory_exception_type": "Base class name for a memory exception",
      "cannot_allocate_memory_exception_type": "Class name for being an unable to allocate memory exception",
      "out_of_memory_exception_type": "Class name for a running out of memory exception",
      "stack_overflow_exception_type": "Class name for a stack overflow exception",
      "cannot_access_pointer_exception_type": "Class name for a cannot access pointer exception"
    },
    "File Input/Output Errors/Exceptions": {
      "base_file_exception_type": "Base class name for a file operation exception",
      "end_of_file_exception_type": "Class name for an end of file exception",
      "file_does_not_exist_exception_type": "Class name for a file does not exist exception",
      "file_already_exists_exception_type": "Class name for a file already exists exception",
      "item_is_actually_directory_exception_type": "Class name for an item is actually a directory exception",
      "item_is_not_a_directory_exception_type": "Class name for an item is not a directory exception",
      "cannot_access_file_exception_type": "Class name for a cannot access file exception",
      "drive_disconnected_exception_type": "Class name for a drive disconnected exception",
      "file_no_longer_available_exception_type": "Class name for a file that is no longer available exception",
      "file_timeout_exception": "Class name for a file timeout error"
    },
    "Network Input/Output Errors/Exceptions": {
      "base_network_exception_type": "Base class name for a network exception",
      "connection_refused_exception_type": "Class name for a network connection refused exception",
      "connection_broken_exception_type": "Class name for a network connection broken exception",
      "invalid_hostname_exception": "Class name for an invalid hostname exception",
      "cannot_establish_connection_exception_type": "Class name for a cannot establish a network connection exception",
      "connection_timed_out_exception_type": "Class name for a network connection timed out exception",
      "bad_certificate_exception_type": "Class name for a bad SSL/TLS certificate exception",
      "expired_certificate_exception_type": "Class name for an expired SSL/TLS certificate exception"
    },
    "Operating System Errors/Exceptions": {
      "child_process_could_not_be_created_exception_type": "Class name for a child process that could not be created exception",
      "child_process_unexpected_ending_exception_type": "Class name for a child process that ended unexpectedly exception",
      "process_not_found_exception_type": "Class name for a process that's not found exception"
    },
    "Other Errors/Exception Types": {
      "base_test_assertion_exception_type": "Base class name for a test assertion exception",
      "import_not_found_exception_type": "Class name for an import that's not found exception",
      "keyboard_interrupt_exception_type": "Class name for a keyboard interrupt occurrence exception",
      "syntax_exception_type": "Class name for a syntax exception",
      "uncaught_signal_exception_type": "Class name for an uncaught system signal exception"
    },
    "Warnings": {
      "base_warning_type": "Base class name for a generic warning",
      "deprecation_warning_type": "Class name for a deprecated statement/function warning"
    }
  }
}
