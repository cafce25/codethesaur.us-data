{
  "meta": {
    "language": "rust",
    "language_version": "1.55.0",
    "language_name": "Rust",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "+",
      "name": "Addition operator"
    },
    "addition_assignment": {
      "code": "+=",
      "name": "Addition and assignment operator"
    },
    "subtraction": {
      "code": "-",
      "name": "Subtraction operator"
    },
    "subtraction_assignment": {
      "code": "-=",
      "name": "Subtraction and assignment operator"
    },
    "multiplication": {
      "code": "*",
      "name": "Multiplication operator"
    },
    "multiplication_assignment": {
      "code": "*=",
      "name": "Multiplication and assignment operator"
    },
    "division": {
      "code": "/",
      "name": "Division operator"
    },
    "division_assignment": {
      "code": "/=",
      "name": "Division and assignment operator"
    },
    "integer_division": {
      "not-implemented": true,
      "comment": "This feature is under progress: https://github.com/rust-lang/rust/issues/88581",
      "name": "Integer division operator"
    },
    "integer_division_assignment": {
      "not-implemented": true,
      "name": "Integer division and assignment operator"
    },
    "modulus": {
      "code": "%",
      "name": "Modulus (remainder) operator"
    },
    "modulus_assignment": {
      "code": "%=",
      "name": "Modulus and assignment operator"
    },
    "unary_plus": {
      "code": "+",
      "name": "Unary plus operator"
    },
    "unary_minus": {
      "code": "-",
      "name": "Unary minus operator"
    },
    "increment": {
      "not-implemented": true,
      "name": "Increment (add 1) operator"
    },
    "decrement": {
      "not-implemented": true,
      "name": "Decrement (subtract 1) operator"
    },
    "exponential": {
      "code": "pow(number, exponent)\nchecked_pow(number, exponent)",
      "comment": "Rust provides methods pow and checked_pow for exponentiation.",
      "name": "Exponential operator"
    },
    "factorial": {
      "not-implemented": true,
      "name": "Factorial operator"
    },
    "absolute_value": {
      "code": "number.abs()",
      "comment": "Rust provides abs method for finding absolute value.",
      "name": "Absolute value operator"
    },
    "percentage": {
      "not-implemented": true,
      "name": "Percentage operator"
    },
    "equal_to": {
      "code": "==",
      "name": "Equality operator"
    },
    "not_equal_to": {
      "code": "!=",
      "name": "Not equal to operator"
    },
    "less_than": {
      "code": "<",
      "name": "Less than operator"
    },
    "less_than_or_equal_to": {
      "code": "<=",
      "name": "Less than or equal to operator"
    },
    "greater_than": {
      "code": ">",
      "name": "Greater than operator"
    },
    "greater_than_or_equal_to": {
      "code": ">=",
      "name": "Greater than or equal to operator"
    },
    "null_coalescing": {
      "not-implemented": "true",
      "name": "Null coalescing operator"
    },
    "is": {
      "not-implemented": "true",
      "name": "Is operator"
    },
    "is_not": {
      "not-implemented": "true",
      "name": "Is not operator"
    },
    "left_shift": {
      "code": "<<",
      "name": "Left shift bitwise operator"
    },
    "left_shift_assignment": {
      "code": "<<=",
      "name": "Left shift assignment operator"
    },
    "right_shift": {
      "code": ">>",
      "name": "Right shift bitwise operator"
    },
    "right_shift_assignment": {
      "code": ">>=",
      "name": "Right shift assignment operator"
    },
    "ternary": {
      "not-implemented": "true",
      "comment": "Rust does not have ternary operator, if/else or bool::then can be used instead",
      "name": "Ternary operator"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "name": "Null forgiving operator"
    }
  }
}
