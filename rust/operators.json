{
  "meta": {
    "language": "rust",
    "language_version": "1.55.0",
    "language_name": "Rust",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "+"
    },
    "addition_assignment": {
      "code": "+="
    },
    "subtraction": {
      "code": "-"
    },
    "subtraction_assignment": {
      "code": "-="
    },
    "multiplication": {
      "code": "*"
    },
    "multiplication_assignment": {
      "code": "*="
    },
    "division": {
      "code": "/"
    },
    "division_assignment": {
      "code": "/="
    },
    "integer_division": {
      "not-implemented": true,
      "comment": "This feature is under progress: https://github.com/rust-lang/rust/issues/88581"
    },
    "integer_division_assignment": {
      "not-implemented": true
    },
    "modulus": {
      "code": "%"
    },
    "modulus_assignment": {
      "code": "%="
    },
    "unary_plus": {
      "code": "+"
    },
    "unary_minus": {
      "code": "-"
    },
    "increment": {
      "not-implemented": true
    },
    "decrement": {
      "not-implemented": true
    },
    "exponential": {
      "code": "pow(number, exponent)\nchecked_pow(number, exponent)",
      "comment": "Rust provides methods pow and checked_pow for exponentiation."
    },
    "factorial": {
      "not-implemented": true
    },
    "absolute_value": {
      "code": "number.abs()",
      "comment": "Rust provides abs method for finding absolute value."
    },
    "percentage": {
      "not-implemented": true
    },
    "equal_to": {
      "code": "=="
    },
    "not_equal_to": {
      "code": "!="
    },
    "less_than": {
      "code": "<"
    },
    "less_than_or_equal_to": {
      "code": "<="
    },
    "greater_than": {
      "code": ">"
    },
    "greater_than_or_equal_to": {
      "code": ">="
    },
    "null_coalescing": {
      "not-implemented": "true"
    },
    "is": {
      "not-implemented": "true"
    },
    "is_not": {
      "not-implemented": "true"
    },
    "left_shift": {
      "code": "<<"
    },
    "left_shift_assignment": {
      "code": "<<="
    },
    "right_shift": {
      "code": ">>"
    },
    "right_shift_assignment": {
      "code": ">>="
    },
    "ternary": {
      "not-implemented": "true",
      "comment": "Rust does not have ternary operator, if/else or bool::then can be used instead"
    },
    "null_forgiving": {
      "not-implemented": "true"
    }
  }
}
