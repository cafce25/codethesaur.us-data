{
  "meta": {
    "language": "Clojure",
    "language_version": "1.10.3",
    "language_name": "Clojure",
    "structure": "functions"
  },
  "categories": {
    "Void Functions": [
      "void_function_no_parameters",
      "void_function_with_parameters",
      "void_function_variable_parameters"
    ],
    "Return Value Functions": [
      "return_value_function_no_parameters",
      "return_value_function_with_parameters",
      "return_value_function_variable_parameters"
    ],
    "Lambda/Anonymous Functions": [
      "anonymous_function_no_parameters",
      "anonymous_function_with_parameters",
      "anonymous_function_variable_parameters"
    ],
    "Subroutines": [
      "call_subroutine",
      "return_from_subroutine"
    ]
  },
  "concepts": {
    "void_function_no_parameters": {
      "code": "(defn void-no-params []\n  (println \"Function called\"))",
      "comment": "There is no concept of void in idiomatic Clojure, so functions with no meaningful return value simply return `nil` (equivalent to `null` in Java). Invoking `println` yields `nil` after it performs its side effect (which is printing something to standard output)."
    },
    "void_function_with_parameters": {
      "code": "(defn void-params [x y]\n  (println \"x + y is: \" (+ x y)))"
    },
    "void_function_variable_parameters": {
      "code": "(defn void-variable-params [x & params]\n  (printf \"x was: %s%n\" x)\n  (println \"Sum of all params: \" (apply + params)))",
      "comment": "There can be one \"variadic\" parameter, and it must appear in the last position."
    },
    "return_value_function_no_parameters": {
      "code": "(defn return-val-no-params []\n  (rand-int 100))",
      "comment": "The value returned by a function is the value that its last form yields. In this case, that is the value from `rand-int`."
    },
    "return_value_function_with_parameters": {
      "code": ";; function to calculate log in different bases\n(defn return-val-params\n  ;; no base specified, assume natural log (base e)\n  ([x]\n   (Math/log x))\n  ;; base specified, use change of base formula\n  ([x base]\n    (/ (Math/log x) (Math/log base))))",
      "comment": "This shows how functions with parameters can have multiple arities (and different behavior for each). Different arities can call each other."
    },
    "return_value_function_variable_parameters": {
      "code": ";; function to find the minimum value passed\n(defn return-val-variable-params [& params]\n  (apply min params))"
    },
    "anonymous_function_no_parameters": {
      "code": "(fn []\n  (println \"Anonymous function called\"))",
      "comment": "Functions in Clojure can be passed as arguments to other functions, returned from functions, etc. They can also appear as \"values\" in any of the standard data structures."
    },
    "anonymous_function_with_parameters": {
      "code": ";; anonymous function to increment the param `x` by one, then divide the result by 2\n(fn [x]\n  (/ (inc x) 2)"
    },
    "anonymous_function_variable_parameters": {
      "code": "(fn [& params]\n  (apply max params))",
      "comment": "Just as with named functions, the variadic parameter must be in the last position."
    },
    "call_subroutine": {
      "code": "(defn plus-one [n]\n  (inc x))",
      "comment": "Named functions are called by wrapping in parens. Anonymous functions can also be called this way."
    },
    "return_from_subroutine": {
      "code": "(defn some-fn []\n  (println \"Printing this line yields nil, but we will still return the value 42 after this\")\n  42))",
      "comment": "The value returned from a function is the value yielded by its final form."
    }
  }
}
