{
  "meta": {
    "language": "csharp",
    "language_version": "9.0",
    "language_name": "C#"
  },
  "categories": {
    "Conditional Statements (ifs)": [
      "if_conditional",
      "if_else_conditional",
      "if_elseif_conditional",
      "if_elseif_else_conditional",
      "switch_statement",
      "ternary_conditional"
    ],
    "Loops": [
      "while_loop",
      "do_while_loop",
      "until_loop",
      "do_until_loop",
      "for_loop",
      "foreach_loop",
      "list_comprehension"
    ],
    "Iterations": [
      "each_iteration",
      "map_iteration",
      "filter_iteration",
      "fold_iteration"
    ]
  },
  "control_structures": {
    "if_conditional": {
      "name": "If conditional",
      "code": "if (condition)\n{\n     statements;\n}"
    },
    "if_else_conditional": {
      "name": "If/Else conditional",
      "code": "if (condition)\n{\n     statements;\n} \nelse\n{\n     statements;\n}"
    },
    "if_elseif_conditional": {
      "name": "If/ElseIf conditional",
      "code": "if (condition)\n{\n    statements;\n} \nelse if (condition)\n{\n    statements;\n}"
    },
    "if_elseif_else_conditional": {
      "name": "If/ElseIf/Else conditional",
      "code": "if (condition)\n{\n    statements;\n} \nelse if (condition)\n{\n    statements;\n}\nelse\n{\n    statements;\n}"
    },
    "switch_statement": {
      "name": "Switch statement",
      "code": "switch (expression)\n{\n    case x:\n        statements;\n        break;\n    case y:\n        statements;\n        break;\n    default:\n        statements;\n        break;\n}"
    },
    "ternary_conditional": {
      "name": "Ternary conditional",
      "code": "condition ? trueExpression : falseExpression"
    },
    "while_loop": {
      "name": "While loop",
      "code": "while (condition)\n{\n    statements;\n}"
    },
    "do_while_loop": {
      "name": "Do/While loop",
      "code": "do\n{\n    statements;\n}\nwhile(condition)"
    },
    "until_loop": {
      "not-implemented": true
    },
    "do_until_loop": {
      "not-implemented": true
    },
    "for_loop": {
      "name": "For loop",
      "code": "for(variables; conditions; expression after iteration)\n{\n    statements;\n}"
    },
    "foreach_loop": {
      "name": "Foreach loop",
      "code": "foreach(item in object)\n{\n    statements;\n}"
    },
    "list_comprehension": {
      "name": "List Comprehension",
      "code": "var newList = list.Select(x => function(x));",
      "comment": "Requires use of the System.Linq namespace in the System.Core assembly."
    },
    "each_iteration": {
      "not-implemented": true
    },
    "map_iteration": {
      "name": "Map iteration",
      "code": "var newList = list.Select(x => function(x));",
      "comment": "Requires use of the System.Linq namespace in the System.Core assembly."
    },
    "filter_iteration": {
      "name": "Filter iteration",
      "code": "var newList = list.Where(x => condition);",
      "comment": "Requires use of the System.Linq namespace in the System.Core assembly."
    },
    "fold_iteration": {
      "name": "Fold iteration",
      "code": "var result = list.Aggregate((x, y) => expression)",
      "comment": "Requires use of the System.Linq namespace in the System.Core assembly."
    }
  }
}
