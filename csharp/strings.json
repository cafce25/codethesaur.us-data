{
  "meta": {
    "language": "csharp",
    "language_version": "9.0",
    "language_name": "C#"
  },
  "categories": {
    "Creating/Destroying Strings": [
      "is_primitive_or_not",
      "import",
      "default_string_byte_encoding",
      "create_new_string",
      "create_multiline_string",
      "assign_new_string",
      "destroy_string"
    ],
    "String Basics": [
      "length_of_string",
      "max_length_of_string",
      "clear_string",
      "is_empty",
      "concatenate_two_strings",
      "concatenate_many_strings",
      "is_all_alphabetical",
      "is_all_numerical",
      "is_all_alphanumeric",
      "is_decimal",
      "is_all_whitespaces",
      "is_all_uppercase",
      "is_all_lowercase",
      "is_in_titlecase"
    ],
    "Find and Search": [
      "does_substring_exist",
      "find_start_index_of_substring",
      "find_start_index_of_additional_substring",
      "find_start_index_of_substring_from_end",
      "count_occurrences_of_substring",
      "get_leftmost_characters",
      "get_rightmost_characters",
      "get_substring_from_start_and_end_index",
      "get_substring_from_start_index_and_length"
    ],
    "Manipulating Strings": [
      "convert_to_uppercase",
      "convert_to_lowercase",
      "convert_to_title_case",
      "capitalize_string",
      "remove_whitespace",
      "replace_substring",
      "replace_all_substring",
      "split_at_index",
      "split_at_newlines",
      "split_at_substring",
      "merge_lists_into_string",
      "encode_html_entities",
      "decode_html_entities",
      "encode_url_percent",
      "decode_url_percent",
      "encode_to_base64",
      "decode_from_base64"
    ],
    "String Formatting": [
      "format_string_function",
      "parameter_format_in_order",
      "parameter_format_numerical",
      "parameter_format_by_name",
      "format_as_integer",
      "format_as_decimal",
      "format_as_fixed_decimal",
      "format_as_currency",
      "format_as_percentage",
      "format_number_with_separators",
      "format_number_with_positive_negative_sign",
      "format_number_in_scientific_notation_little_e",
      "format_number_in_scientific_notation_big_e",
      "format_number_in_binary",
      "format_number_in_octal",
      "format_number_in_hexadecimal"
    ]
  },
  "strings": {
    "is_primitive_or_not": {
      "code": "Yes"
    },
    "import": {
      "code": "using  System;",
      "comment": "`string` will be avalible without this using but `String` will not be."
    },
    "default_string_byte_encoding": {
      "code": "UTF-16"
    },
    "create_new_string": {
      "code": "var newString = \".... . .-.. .-.. ---\";"
    },
    "create_multiline_string": {
      "code": "var multiLineString = @\"Line 1\n    Line 2\n     Line 3\";"
    },
    "assign_new_string": {
      "code": "var s1 = \"String 1\";\nvar s2 = s1;"
    },
    "destroy_string": {
      "not-implemented": true
    },
    "length_of_string": {
      "code": "\"Four\".Length;"
    },
    "max_length_of_string": {
      "code": "1073741823"
    },
    "clear_string": {
      "not-implemented": true
    },
    "is_empty": {
      "code": "string.IsNullOrEmpty(str);\nstring.IsNullOrWhiteSpace(str);",
      "comment": "string.IsNullOrWhiteSpace() will return true when the string is null or the string contains any whitespace character as specified in the Unicode standard."
    },
    "concatenate_two_strings": {
      "code": "var s1 = \"Hello\";\ns2 = \"World\";\n\nvar interpolation = $\"{s1}{s2}\"\nvar s3 = s1 + s2;\ns1 += s2;"
    },
    "concatenate_many_strings": {
      "code": "var sb = new System.Text.StringBuilder();\nfor (int i = 0; i < 20; i++)\n{\n    sb.AppendLine(i.ToString());\n}\nvar result = sb.ToString();"
    },
    "is_all_alphabetical": {
      "not-implemented": true
    },
    "is_all_numerical": {
      "code": "bool isNumber = int.TryParse(str, out integer);",
      "comment": "This will also work with other numeric types such as byte, decimal, long, etc."
    },
    "is_all_alphanumeric": {
      "not-implemented": true
    },
    "is_decimal": {
      "code": "bool isNumber = decimal.TryParse(str, out integer);"
    },
    "is_all_whitespaces": {
      "code": "string.IsNullOrWhiteSpace(str);"
    },
    "is_all_uppercase": {
      "not-implemented": true
    },
    "is_all_lowercase": {
      "not-implemented": true
    },
    "is_in_titlecase": {
      "not-implemented": true
    },
    "does_substring_exist": {
      "code": "str.Contains(subString);"
    },
    "find_start_index_of_substring": {
      "code": "str.IndexOf(subString);"
    },
    "find_start_index_of_additional_substring": {
      "code": "str.IndexOf(subString, startIndex);"
    },
    "find_start_index_of_substring_from_end": {
      "code": "str.LastIndexOf(subString, startIndex);"
    },
    "count_occurrences_of_substring": {
      "code": "Regex.Matches(str, pattern).Count;",
      "comment": "Requires use of System.Text.RegularExpressions."
    },
    "get_leftmost_characters": {
      "code": "str.Substring(startIndex, numberOfCharacters);"
    },
    "get_rightmost_characters": {
      "code": "str.Substring(str.Length - numberOfCharacters, numberOfCharacters);"
    },
    "get_substring_from_start_and_end_index": {
      "not-implemented": true
    },
    "get_substring_from_start_index_and_length": {
      "code": "str.Substring(startIndex, numberOfCharacters);"
    },
    "convert_to_uppercase": {
      "code": "str.ToUpper();"
    },
    "convert_to_lowercase": {
      "code": "str.ToLower();"
    },
    "convert_to_title_case": {
      "code": "var textInfo = new CultureInfo(culture).TextInfo;\ntextInfo.ToTitleCase(str);",
      "comment": "Requires use of System.Globalization."
    },
    "capitalize_string": {
      "code": "var s1 = \"hello.\";\nvar s1Capitalised = Char.ToUpper(s1[0]) + s1.Substring(1);"
    },
    "remove_whitespace": {
      "not-implemented": true
    },
    "replace_substring": {
      "code": "Regex regex = new Regex(pattern);\nregex.Replace(subString, newString, numberToReplace);",
      "comment": "Requires use of System.Text.RegularExpressions."
    },
    "replace_all_substring": {
      "code": "str.Replace(substring, newString);"
    },
    "split_at_index": {
      "not-implemented": true
    },
    "split_at_newlines": {
      "code": "str.Split('\\n');"
    },
    "split_at_substring": {
      "code": "str.Split(substring);"
    },
    "merge_lists_into_string": {
      "code": "string.Join(delimiter, stringList);"
    },
    "encode_html_entities": {
      "code": "HttpUtility.HtmlEncode(str);",
      "comment": "Requires use of System.Web."
    },
    "decode_html_entities": {
      "code": "HttpUtility.HtmlDecode(str);",
      "comment": "Requires use of System.Web."
    },
    "encode_url_percent": {
      "code": "HttpUtility.UrlEncode(str);",
      "comment": "Requires use of System.Web."
    },
    "decode_url_percent": {
      "code": "HttpUtility.UrlDecode(str);",
      "comment": "Requires use of System.Web."
    },
    "encode_to_base64": {
      "code": "Convert.ToBase64String(Encoding.UTF8.GetBytes(str));",
      "comment": "Requires use of System.Web."
    },
    "decode_from_base64": {
      "code": "Convert.FromBase64String(str);",
      "comment": "Requires use of System.Web."
    },
    "format_string_function": {
      "code": "string.Format();"
    },
    "parameter_format_in_order": {
      "code": "{index}"
    },
    "parameter_format_numerical": {
      "not-implemented": true
    },
    "parameter_format_by_name": {
      "code": "$\"{s1} {s2}\"",
      "comment": "Note this is string interpolation and does not use string.Format(). All format parameters below can also be used in interpolated strings with {variableName:formatter}."
    },
    "format_as_integer": {
      "not-implemented": true
    },
    "format_as_decimal": {
      "code": "{0:D}"
    },
    "format_as_fixed_decimal": {
      "code": "{0:F}"
    },
    "format_as_currency": {
      "code": "{0:C}"
    },
    "format_as_percentage": {
      "code": "{0:P}"
    },
    "format_number_with_separators": {
      "code": "{0:N}"
    },
    "format_number_with_positive_negative_sign": {
      "not-implemented": true
    },
    "format_number_in_scientific_notation_little_e": {
      "code": "{0:e}"
    },
    "format_number_in_scientific_notation_big_e": {
      "code": "{0:E}"
    },
    "format_number_in_binary": {
      "code": "Convert.ToString(int.Parse(str), 2);"
    },
    "format_number_in_octal": {
      "code": "Convert.ToString(int.Parse(str), 8);"
    },
    "format_number_in_hexadecimal": {
      "code": "{0:X}"
    }
  }
}