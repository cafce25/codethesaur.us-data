{
  "meta": {
    "language": "csharp",
    "language_version": "9.0",
    "language_name": "C#"
  },
  "concepts": {
    "void_function_no_parameters": {
      "code": "void FunctionName()\n{\n\t//code\n}"
    },
    "void_function_with_parameters": {
      "code": "void FunctionName(parameterType1 parameterName1, parameterType2 parameterName2)\n{\n\t//code\n}"
    },
    "void_function_variable_parameters": {
      "code": "void FunctionName(params parameterType[] parameterName)\n{\n//code\n}"
    },
    "return_value_function_no_parameters": {
      "code": "returnValueType FunctionName()\n{\n\t//code\n\treturn returnValue;\n}"
    },
    "return_value_function_with_parameters": {
      "code": "returnValueType FunctionName(parameterType1 parameterName1, parameterType2 parameterName2)\n{\n\t//code\n\treturn returnValue;\n}"
    },
    "return_value_function_variable_parameters": {
      "name": "Function that returns a value and takes an unknown number of parameters",
      "code": "returnValueType FunctionName(params parameterType[] parameterName)\n{\n//code\n\treturn returnValue;\n}"
    },
    "anonymous_function_no_parameters": {
      "name": "Anonymous function that takes no parameters",
      "code": "() =>\n{\n\t//code\n}"
    },
    "anonymous_function_with_parameters": {
      "name": "Anonymous function that takes 1 or more defined parameters",
      "code": "(parameterType1 parameterName1, parameterType2 parameterName2) =>\n{\n\t//code\n}"
    },
    "anonymous_function_variable_parameters": {
      "name": "Anonymous function that takes an unknown number of parameters",
      "code": ""
    },
    "call_subroutine": {
      "name": "Call subroutine",
      "code": "MyClass x = new MyClass();\nx.SubRoutine();"
    },
    "return_from_subroutine": {
      "name": "Return from subroutine",
      "code": "MyClass x = new MyClass();\nSubRoutineReturnType y = x.SubRoutine();"
    }
  }
}
