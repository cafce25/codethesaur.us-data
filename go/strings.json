{
  "meta": {
    "language": "go",
    "language_version": "1.14",
    "language_name": "Go",
    "structure": "strings"
  },
  "concepts": {
    "is_primitive_or_not": {
      "code": [
        "Yes"
      ],
      "name": "Is this a built-in type in this language?"
    },
    "import": {
      "not-implemented": true,
      "name": "Import the string class"
    },
    "default_string_byte_encoding": {
      "code": [
        "UTF-8"
      ],
      "name": "Default byte encoding (ex: ASCII UTF-8, UTF-16, etc.)"
    },
    "create_new_string": {
      "code": [
        "example := \"New String Example\""
      ],
      "name": "Create new string"
    },
    "create_multiline_string": {
      "code": [
        "example := `New\nMulti-line\nString`"
      ],
      "name": "Create new multi-line string"
    },
    "assign_new_string": {
      "code": [
        "example := \"New String Example\"\nanother = example"
      ],
      "name": "Assign string from another string"
    },
    "destroy_string": {
      "not-implemented": true,
      "name": "Destroy string"
    },
    "length_of_string": {
      "code": [
        "len(str)"
      ],
      "name": "Length of string"
    },
    "max_length_of_string": {
      "not-implemented": true,
      "name": "Maximum length of string"
    },
    "clear_string": {
      "not-implemented": true,
      "name": "Clear/empty string"
    },
    "is_empty": {
      "code": [
        "if s == \"\":"
      ],
      "name": "Is string empty?"
    },
    "concatenate_two_strings": {
      "code": [
        "s1 := \"Hello\"\ns2 := \"World\"\ns3 := s1 + s2"
      ],
      "name": "Concatenate/join two strings"
    },
    "concatenate_many_strings": {
      "code": [
        "s1 := \"foo\"\ns2 :=\"bar\"\ns3 :=\"baz\"\ns4 := s1 + s2 + s3"
      ],
      "name": "Concatenate/join many strings"
    },
    "is_all_alphabetical": {
      "not-implemented": true,
      "name": "Is string all alphabetical characters?"
    },
    "is_all_numerical": {
      "not-implemented": true,
      "name": "Is string all numerical characters?"
    },
    "is_all_alphanumeric": {
      "not-implemented": true,
      "name": "Is string all alphanumeric characters?"
    },
    "is_decimal": {
      "not-implemented": true,
      "name": "Is string a decimal number?"
    },
    "is_all_whitespaces": {
      "not-implemented": true,
      "name": "Is string all whitespace characters?"
    },
    "is_all_uppercase": {
      "not-implemented": true,
      "name": "Is string all uppercase characters?"
    },
    "is_all_lowercase": {
      "not-implemented": true,
      "name": "Is string all lowercase characters?"
    },
    "is_in_titlecase": {
      "not-implemented": true,
      "name": "Is string formatted in title case?"
    },
    "does_substring_exist": {
      "code": [
        "s := \"Hello, World!\"\nexist := strings.Contains(s, \"llo\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Does a substring exist in a string?"
    },
    "find_start_index_of_substring": {
      "code": [
        "s := \"Hello, World!\"\nindex := strings.Index(s, \"llo\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Find index of where a substring starts"
    },
    "find_start_index_of_additional_substring": {
      "not-implemented": true,
      "name": "Find index of an additional substring (or starting at another index)"
    },
    "find_start_index_of_substring_from_end": {
      "not-implemented": true,
      "name": "Find substring index starting at end"
    },
    "count_occurrences_of_substring": {
      "code": [
        "s := \"Hello, World!\"\ncount := strings.Index(s, \"l\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Find number of occurences of a substring"
    },
    "get_leftmost_characters": {
      "code": [
        "s := \"Hello, World!\"\nres := s[:5]"
      ],
      "name": "Get a specified number of characters from the left"
    },
    "get_rightmost_characters": {
      "code": [
        "s := \"Hello, World!\"\nres := s[len(s)-6:]"
      ],
      "name": "Get a specified number of characters from the right"
    },
    "get_substring_from_start_and_end_index": {
      "code": [
        "s := \"Hello, World!\"\nres := s[3:6]"
      ],
      "name": "Return a substring from a string based on starting and ending indices"
    },
    "get_substring_from_start_index_and_length": {
      "not-implemented": true,
      "name": "Return a substring from a string based on starting index and size of substring"
    },
    "convert_to_uppercase": {
      "code": [
        "s := \"Hello, World!\"\nres := strings.ToUpper(s)"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Convert string to all uppercase"
    },
    "convert_to_lowercase": {
      "code": [
        "s := \"Hello, World!\"\nres := strings.ToLower(s)"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Convert string to all lowercase"
    },
    "convert_to_title_case": {
      "code": [
        "s := \"Hello, World!\"\nres := strings.ToTitle(s)"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Convert string to title case"
    },
    "capitalize_string": {
      "not-implemented": true,
      "name": "Capitalize first letter of a string"
    },
    "remove_whitespace": {
      "not-implemented": true,
      "name": "Remove all whitespaces from string"
    },
    "replace_substring": {
      "code": [
        "s := \"Hello, World!\"\nres := strings.Replace(s, \"World\", \"Universe\", 1)"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Replace a substring with another string"
    },
    "replace_all_substring": {
      "code": [
        "s := \"Hello, World World World!\"\nres := strings.ReplaceAll(s, \"World\", \"Universe\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Replace all substring matches with another string"
    },
    "split_at_index": {
      "not-implemented": true,
      "name": "Split string into a list of strings at a given index"
    },
    "split_at_newlines": {
      "code": [
        "s := `Hello, World\nWorld\nWorld!`\nres := strings.Split(s, \"\n\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Split string into a list of strings at every new line character"
    },
    "split_at_substring": {
      "code": [
        "s := \"Hello, World World World!\"\nres := strings.Split(s, \"World\")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Split string by locating all substrings"
    },
    "merge_lists_into_string": {
      "code": [
        "s := []string{\"foo\", \"bar\", \"baz\"}\nres := strings.Join(s, \", \")"
      ],
      "comment": "Need to import standard library \"strings\"",
      "name": "Merge a list of strings into one string"
    },
    "encode_html_entities": {
      "not-implemented": true,
      "name": "Encode HTML entities in a string (ex: \u2122 to &trade;)"
    },
    "decode_html_entities": {
      "not-implemented": true,
      "name": "Decode HTML entitles into characters"
    },
    "encode_url_percent": {
      "not-implemented": true,
      "name": "Encode URL percent encoding into string (ex: ' ' to %20)"
    },
    "decode_url_percent": {
      "not-implemented": true,
      "name": "Decode URL percent encoding"
    },
    "encode_to_base64": {
      "code": [
        "data := []byte(\"any + old & data\")\ns := base64.StdEncoding.EncodeToString(data)"
      ],
      "comment": "Need to import standard library \"base64\"",
      "name": "Encode string into Base64 format"
    },
    "decode_from_base64": {
      "code": [
        "s := \"c29tZSBkYXRhIHdpdGggACBhbmQg77u/\"\ndata, err := base64.StdEncoding.DecodeString(s)"
      ],
      "comment": "Need to import standard library \"base64\"",
      "name": "Decode string from Base64 format"
    },
    "format_string_function": {
      "code": [
        "fmt.Sprintf()"
      ],
      "name": "Function to format a string"
    },
    "parameter_format_in_order": {
      "code": [
        "fmt.Sprintf(\"Hello, %s! And Hello, %s!\", \"World\", \"Universe\")"
      ],
      "name": "Parameter used in format function if they're used in order"
    },
    "parameter_format_numerical": {
      "code": [
        "fmt.Sprintf(\"%[2]d %[1]d\\n\", 11, 22)"
      ],
      "name": "Parameter used in format function if they're numerically numbered"
    },
    "parameter_format_by_name": {
      "not-implemented": true,
      "name": "Paramater used in format function if they're named variables"
    },
    "format_as_integer": {
      "code": [
        "fmt.Sprintf(\"%d\", num)"
      ],
      "name": "Format parameter as an integer"
    },
    "format_as_decimal": {
      "code": [
        "fmt.Sprintf(\"%d\", num)"
      ],
      "name": "Format parameter as a decimal number"
    },
    "format_as_fixed_decimal": {
      "code": [
        "fmt.Sprintf(\"%.2f\", num)"
      ],
      "name": "Format parameter as a fixed-point decimal number"
    },
    "format_as_currency": {
      "not-implemented": true,
      "name": "Format parameter as a currency number"
    },
    "format_as_percentage": {
      "code": [
        "fmt.Sprintf(\"%d%%\", num)"
      ],
      "name": "Format parameter as a percentage number"
    },
    "format_number_with_separators": {
      "not-implemented": true,
      "name": "Format number with thousand separators"
    },
    "format_number_with_positive_negative_sign": {
      "not-implemented": true,
      "name": "Format number with positive/negative signs"
    },
    "format_number_in_scientific_notation_little_e": {
      "code": [
        "fmt.Sprintf(\"%e\", num)"
      ],
      "name": "Format number with scientific notation with 'e'"
    },
    "format_number_in_scientific_notation_big_e": {
      "code": [
        "fmt.Sprintf(\"%E\", num)"
      ],
      "name": "Format number with scientific notation with 'E'"
    },
    "format_number_in_binary": {
      "code": [
        "fmt.Sprintf(\"%E\", num)"
      ],
      "name": "Format number into binary"
    },
    "format_number_in_octal": {
      "code": [
        "fmt.Sprintf(\"%o\", num)"
      ],
      "name": "Format number into octal"
    },
    "format_number_in_hexadecimal": {
      "code": [
        "fmt.Sprintf(\"%x\", num)"
      ],
      "name": "Format number into hexadecimal"
    }
  }
}
