{
  "meta": {
    "language": "typescript",
    "language_version": "4.2",
    "language_name": "TypeScript",
    "structure": "classes"
  },
  "concepts": {
    "normal_class": {
      "code": "class Demo { }",
      "name": "Normal class"
    },
    "abstract_class": {
      "code": "abstract class Demo { }",
      "name": "Abstract class"
    },
    "interface": {
      "code": "interface Demo { }",
      "name": "Interface"
    },
    "read_only_class": {
      "not-implemented": true,
      "name": "Read-only class"
    },
    "static_class": {
      "not-implemented": true,
      "name": "Static class"
    },
    "inner_class": {
      "not-implemented": true,
      "name": "Inner class"
    },
    "packages": {
      "not-implemented": true,
      "name": "Packages"
    },
    "class_with_generic_type": {
      "code": "class KeyValuePair<T,U> {}",
      "name": "Class with a generic type"
    },
    "private_variables": {
      "code": "class Demo { \n private type: number \n  }",
      "name": "Defining private variables"
    },
    "protected_variables": {
      "code": "class Demo { \n protected type: number  \n }",
      "name": "Defining protected variables"
    },
    "public_variables": {
      "code": "class Demo { \n  type: number  \n }",
      "name": "Defining public variables"
    },
    "static_variables": {
      "code": "class Demo { \n static type: number  \n }",
      "name": "Defining static variables"
    },
    "private_functions": {
      "code": "class Demo { \n private getType():number {}  \n }",
      "name": "Defining private functions"
    },
    "protected_functions": {
      "code": "class Demo { \n protected getType():number {}  \n }",
      "name": "Defining protected functions"
    },
    "public_functions": {
      "code": "class Demo { \n getType():number {}  \n }",
      "name": "Defining public functions"
    },
    "static_functions": {
      "code": "class Demo { \n static getType():number {}  \n }",
      "name": "Defining static functions"
    },
    "extends_class": {
      "code": "class Person {\n name: string;\n  }\n class Employee extends Person {\n empCode: number; \n displayName():void {\n console.log('Name = ' + this.name + ', Employee Code = ' + this.empCode);\n }\n }",
      "name": "Class that inherits/extends another class"
    },
    "extending_interface": {
      "code": "interface IPerson {\n name: string;\n gender: string; \n}\n interface IEmployee extends IPerson {\n empCode: number; \n}",
      "name": "Class/Interface that inherits/extends another class/interface"
    },
    "calling_superclass_functions": {
      "code": "class Person{\n name:string\n eat():void{\n console.log(`${this.name} eats when hungry.`)\n }\n }\n class Student extends Person{\n rollnumber:number;\n constructor(rollnumber:number, name1:string){\n super(); // calling Parent's constructor\n }\n } ",
      "name": "Calling a superclass function"
    },
    "overriding_superclass_functions": {
      "code": "class Person{\n name:string\n eat():void{\n console.log(`${this.name} eats when hungry.`)\n }\n }\n class Student extends Person{\n rollnumber:number;\n constructor(rollnumber:number, name1:string){\n super(); \n this.rollnumber = rollnumber\n this.name = name1\n }\n // overriding eat function\n eat():void{\n console.log(`${this.name} eats during break.`)\n }\n } ",
      "name": "Overriding a superclass function"
    },
    "instantiating_object": {
      "code": "const demoObject = new Demo()",
      "name": "Instantiating a new object"
    },
    "instantiating_polymorphic_object": {
      "code": "interface Point {\n x: number;\n y: number;\n }\n class Dot implements Point{\n x: number;\n y: number;\n }\n const object :Point = new Dot;",
      "name": "Instantiating a polymorphic object"
    },
    "implement_constructor": {
      "code": "class Employee {\n empCode: number;\n empName: string;\n constructor(code: number, name: string) {\n this.empName = name;\n this.empCode = code;\n }\n }",
      "name": "Implementing a class constructor"
    },
    "implement_deconstructor": {
      "not-implemented": true,
      "name": "Implementing a class deconstructor"
    }
  }
}
