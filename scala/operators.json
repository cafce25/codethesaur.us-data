{
  "meta": {
    "language": "scala",
    "language_version": "2.13.x",
    "language_name": "Scala"
  },
  "categories": {
    "Arithmetic Operators": [
      "addition",
      "addition_assignment",
      "subtraction",
      "subtraction_assignment",
      "multiplication",
      "multiplication_assignment",
      "division",
      "division_assignment",
      "integer_division",
      "integer_division_assignment",
      "modulus",
      "modulus_assignment",
      "unary_plus",
      "unary_minus",
      "increment",
      "decrement",
      "exponential",
      "factorial",
      "absolute_value",
      "percentage"
    ],
    "Equality/Comparison Operators": [
      "equal_to",
      "not_equal_to",
      "less_than",
      "less_than_or_equal_to",
      "greater_than",
      "greater_than_or_equal_to",
      "null_coalescing",
      "is",
      "is_not"
    ],
    "Logical/Boolean/Bitwise Operators": [
      "and",
      "and_assignment",
      "or",
      "or_assignment",
      "not",
      "not_assignment",
      "binary_and",
      "binary_or",
      "binary_ones_complement",
      "xor_assignment",
      "xor",
      "xor_assignment",
      "xnor",
      "xnor_assignment",
      "left_shift",
      "left_shift_assignment",
      "right_shift",
      "right_shift_assignment",
      "right_zero_fill"
    ],
    "Conditional Operators": [
      "ternary",
      "null_forgiving"
    ]
  },
  "operators": {
    "addition": {
      "name": "Addition operator",
      "code": "+"
    },
    "addition_assignment": {
      "name": "Addition and assignment operator",
      "code": "+="
    },
    "subtraction": {
      "name": "Subtraction operator",
      "code": "-"
    },
    "subtraction_assignment": {
      "name": "Subtraction and assignment operator",
      "code": "-="
    },
    "multiplication": {
      "name": "Multiplication operator",
      "code": "*"
    },
    "multiplication_assignment": {
      "name": "Multiplication and assignment operator",
      "code": "*="
    },
    "division": {
      "name": "Division operator",
      "code": "/"
    },
    "division_assignment": {
      "name": "Division and assignment operator",
      "code": "/="
    },
    "integer_division": {
      "not-implemented": "true",
      "name": "Integer division operator",
      "code": ""
    },
    "integer_division_assignment": {
      "not-implemented": "true",
      "name": "Integer division and assignment operator",
      "code": ""
    },
    "modulus": {
      "name": "Modulus (remainder) operator",
      "code": "%"
    },
    "modulus_assignment": {
      "name": "Modulus and assignment operator",
      "code": "%="
    },
    "unary_plus": {
      "not-implemented": "true",
      "name": "Unary plus operator",
      "code": ""
    },
    "unary_minus": {
      "not-implemented": "true",
      "name": "Unary minus operator",
      "code": ""
    },
    "increment": {
      "name": "Increment (add 1) operator",
      "code": "++"
    },
    "decrement": {
      "name": "Decrement (subtract 1) operator",
      "code": "--"
    },
    "exponential": {
      "not-implemented": "true",
      "name": "Exponential operator",
      "code": ""
    },
    "factorial": {
      "not-implemented": "true",
      "name": "Factorial operator",
      "code": ""
    },
    "absolute_value": {
      "not-implemented": "true",
      "name": "Absolute value operator",
      "code": ""
    },
    "percentage": {
      "not-implemented": "true",
      "name": "Percentage operator",
      "code": ""
    },
    "equal_to": {
      "name": "Equality operator",
      "code": "==",
      "comment": "There is also === which you use to test whether two object references both refer to the same object instance"
    },
    "not_equal_to": {
      "name": "Not equal to operator",
      "code": "!=",
      "comment": "There is also !== which you use to test whether two object references both refer to the same object instance"
    },
    "less_than": {
      "name": "Less than operator",
      "code": "<"
    },
    "less_than_or_equal_to": {
      "name": "Less than or equal to operator",
      "code": "<="
    },
    "greater_than": {
      "name": "Greater than operator",
      "code": ">"
    },
    "greater_than_or_equal_to": {
      "name": "Greater than or equal to operator",
      "code": ">="
    },
    "null_coalescing": {
      "name": "Null coalescing operator",
      "code": "??"
    },
    "is": {
      "not-implemented": "true",
      "name": "Is operator",
      "code": ""
    },
    "is_not": {
      "not-implemented": "true",
      "name": "Is not operator",
      "code": ""
    },
    "and": {
      "name": "Logical AND operator",
      "code": "&&"
    },
    "and_assignment": {
      "not-implemented": "true",
      "name": "Logical AND assignment operator",
      "code": ""
    },
    "or": {
      "name": "Logical OR operator",
      "code": "||"
    },
    "or_assignment": {
      "not-implemented": "true",
      "name": "Logical OR assignment operator",
      "code": ""
    },
    "not": {
      "name": "Logical NOT operator",
      "code": "!"
    },
    "not_assignment": {
      "not-implemented": "true",
      "name": "Logical NOT assignment operator",
      "code": ""
    },
    "xor": {
      "name": "Logical XOR operator",
      "code": "^"
    },
    "xor_assignment": {
      "not-implemented": "true",
      "name": "Logical XOR assignment operator",
      "code": ""
    },
    "xnor": {
      "not-implemented": "true",
      "name": "Logical XNOR operator",
      "code": ""
    },
    "xnor_assignment": {
      "not-implemented": "true",
      "name": "Logical XNOR assignment operator",
      "code": ""
    },
    "binary_and": {
      "name": "Binary AND operator",
      "code": "&"
    },
    "binary_or": {
      "name": "Binary OR operator",
      "code": "|"
    },
    "binary_ones_complement": {
      "name": "Binary Ones Complement Operator",
      "code": "~"
    },
    "left_shift": {
      "name": "Left shift bitwise operator",
      "code": "<<"
    },
    "left_shift_assignment": {
      "not-implemented": "true",
      "name": "Left shift assignment operator",
      "code": ""
    },
    "right_shift": {
      "name": "Right shift bitwise operator",
      "code": ">>"
    },
    "right_shift_assignment": {
      "not-implemented": "true",
      "name": "Right shift assignment operator",
      "code": ""
    },
    "right_zero_fill": {
      "name": "Shift right zero fill operator",
      "code": ">>>",
      "comment":"The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled with zeros."
    },
    "ternary": {
      "name": "Ternary operator",
      "code": "?:"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "name": "Null forgiving operator",
      "code": ""
    }
  }
}